main = "Regression: GDP & Exports",
xlab = "Exports",
ylab = "GDP ($billion)")
abline(ecoModel5, col="red")
## Checking all regression assumptions
plot(ecoModel5, 1)
plot(ecoModel5, 2)
residuals <- residuals(ecoModel5)
hist(residuals, main = "Histogram of Residuals", col = "red")
plot(ecoModel5, 3)
# Fitting a Multiple Linear Regression model
ecoModel6 <- lm(GDP ~ Exports + Imports , data = economic_log)
print(summary(ecoModel6))
# Adding an extra independent variable to the model
ecoModel7 <- lm(GDP ~ Exports + Imports + Technology_Exports   , data = economic_log)
print(summary(ecoModel7))
# Adding Imports to the model
ecoModel8 <- lm(GDP ~ Exports + Imports + Labor_Force, data = economic_log)
print(summary(ecoModel8))
# Plotting the regression line
ggplot(ecoModel7, aes(x = Exports, y = GDP)) +
geom_point(aes(color = Imports)) +
geom_smooth(method = "lm", formula = y ~ x, se = FALSE, color = "blue") +
labs(title = "Multiple Linear Regression",
x = "Exports",
y = "Gross Domestic Product",
color = "Imports") +
theme_minimal()
## Checking SLR assumptions
plot(ecoModel7, 1)
plot(ecoModel7, 2)
plot(ecoModel7, 3)
# Selecting governance-related variables
social_var <- economic_log[, c("Per_Capita", "Corruption_Control", "Political_Stability", "Government_Effectiveness", "Regulatory_Quality", "Rule_of_Law")]
# Computing correlation matrix
social_matrix <- cor(social_var, method="spearman")
corrplot(cor(social_var), method = "number", type = "upper")
pairs(social_var, lower.panel = NULL, pch = 19,cex = 0.2)
# Fitting the Multiple Linear Regression model
socModel1 <- lm(Per_Capita ~ Government_Effectiveness +
Corruption_Control, data = economic_log)
print(summary(socModel1))
# Adding an extra independent variable to the mix
socModel2 <- lm(Per_Capita ~ Government_Effectiveness +
Corruption_Control + Political_Stability, data = economic_log)
print(summary(socModel2))
# Adding Regulatory Quality to the mix
socModel3 <- lm(Per_Capita ~ Government_Effectiveness + Corruption_Control
+ Political_Stability + Regulatory_Quality, data = economic_log)
print(summary(socModel3))
# Plotting the regression line
ggplot(socModel3, aes(x = Government_Effectiveness, y = Per_Capita)) +
geom_point(aes(color = Regulatory_Quality)) +
geom_smooth(method = "lm", formula = y ~ x, se = FALSE, color = "blue") +
labs(title = "Multiple Linear Regression",
x = "Government Effectiveness",
y = "GDP Per Capita",
color = "Regulatory Quality") +
theme_minimal()
## Checking all regression assumptions
plot(socModel3, 1)
plot(socModel3, 2)
residuals <- residuals(socModel3)
hist(residuals, main = "Histogram of Residuals", col = "lightblue")
plot(socModel3, 3)
# Randomly selecting countries from each continent
set.seed(20)
selected_countries <- economic_log %>%
group_by(continent) %>%
slice_sample(n = 1) %>%
ungroup()
print(selected_countries)
# Creating a data subset for the selected countries
GDP_Data <- economic_log[economic_log$Country %in% selected_countries$Country,
c("Country", "continent", "GDP", "GDP_Growth")]
GDP_Data_Africa <- GDP_Data[GDP_Data$continent == "Africa", ]
GDP_Data_Americas <- GDP_Data[GDP_Data$continent == "Americas", ]
GDP_Data_Asia <- GDP_Data[GDP_Data$continent == "Asia", ]
GDP_Data_Europe <- GDP_Data[GDP_Data$continent == "Europe", ]
# Creating a time series object for yearly data
seriesAfrica <- ts(GDP_Data_Africa$GDP_Growth, start = c(2008), end = c(2022))
plot.ts(seriesAfrica)
# Calculate and comparing Simple Moving Average (SMA) with different sizes
GDPseriesSMA3 <- SMA(seriesAfrica, n=3)
plot.ts(GDPseriesSMA3)
GDPseriesSMA8 <- SMA(seriesAfrica, n=8)
plot.ts(GDPseriesSMA8)
# Using Holt-Winters Exponential Smoothing (with trend component)
GDPseries_smoothing2 <-  HoltWinters(seriesAfrica, gamma=FALSE)
GDPseries_smoothing2
plot(GDPseries_smoothing2)
# Computing the Sum of Squared Errors (SSE)
GDPseries_smoothing2$SSE
# Forecasting the next 15  years
GDPseries_forecast2 <- forecast(GDPseries_smoothing2, h=15)
GDPseries_forecast2
plot(GDPseries_forecast2)
# Plotting autocorrelation function
acf(GDPseries_forecast2$residuals, lag.max=20 , na.action = na.pass)
# Performing the Ljung-Box test
Box.test(GDPseries_forecast2$residuals, lag=10, type="Ljung-Box")
# Defining function for forecast errors
plotForecastErrors <- function(forecasterrors)
{
# make a histogram of the forecast errors:
mybinsize <- IQR(forecasterrors,na.rm=TRUE)/4
mysd   <- sd(forecasterrors,na.rm=TRUE)
mymin  <- min(forecasterrors,na.rm=TRUE) - mysd*5
mymax  <- max(forecasterrors,na.rm=TRUE) + mysd*3
# generate normally distributed data with mean 0 and standard deviation mysd
mynorm <- rnorm(10000, mean=0, sd=mysd)
mymin2 <- min(mynorm)
mymax2 <- max(mynorm)
if (mymin2 < mymin) { mymin <- mymin2 }
if (mymax2 > mymax) { mymax <- mymax2 }
# make a red histogram of the forecast errors, with the normally distributed data overlaid:
mybins <- seq(mymin, mymax, mybinsize)
hist(forecasterrors, col="red", freq=FALSE, breaks=mybins)
# freq=FALSE ensures the area under the histogram = 1
# generate normally distributed data with mean 0 and standard deviation mysd
myhist <- hist(mynorm, plot=FALSE, breaks=mybins)
# plot the normal curve as a blue line on top of the histogram of forecast errors:
points(myhist$mids, myhist$density, type="l", col="blue", lwd=2)
}
# Plotting the time series of residuals and forecast errors
plot.ts(GDPseries_forecast2$residuals)
GDPseries_forecast2$residuals <-GDPseries_forecast2$residuals[!is.na(GDPseries_forecast2$residuals)]
plotForecastErrors(GDPseries_forecast2$residuals)
seriesAmericas <- ts(GDP_Data_Americas$GDP_Growth, start = c(2008), end = c(2022))
plot.ts(seriesAmericas)
GDPseries_smoothing <-  HoltWinters(seriesAmericas, gamma=FALSE)
GDPseries_smoothing
GDPseries_smoothing$SSE
plot(GDPseries_smoothing)
GDPseries_forecast <- forecast(GDPseries_smoothing, h=19)
GDPseries_forecast
plot(GDPseries_forecast)
acf(GDPseries_forecast$residuals, lag.max=20 , na.action = na.pass)
Box.test(GDPseries_forecast$residuals, lag=20, type="Ljung-Box")
plot.ts(GDPseries_forecast$residuals)
GDPseries_forecast$residuals <-GDPseries_forecast$residuals[!is.na(GDPseries_forecast$residuals)]
plotForecastErrors(GDPseries_forecast$residuals)
seriesAsia <- ts(GDP_Data_Asia$GDP_Growth, start = c(2008), end = c(2022))
plot.ts(seriesAsia)
GDPseries_smoothing3 <-  HoltWinters(seriesAsia, gamma=FALSE)
GDPseries_smoothing3
GDPseries_smoothing3$SSE
plot(GDPseries_smoothing3)
GDPseries_forecast3 <- forecast(GDPseries_smoothing3, h=5)
GDPseries_forecast3
plot(GDPseries_forecast3)
acf(GDPseries_forecast3$residuals, lag.max=20 , na.action = na.pass)
Box.test(GDPseries_forecast3$residuals, lag=20, type="Ljung-Box")
plot.ts(GDPseries_forecast3$residuals)
GDPseries_forecast3$residuals <-GDPseries_forecast3$residuals[!is.na(GDPseries_forecast3$residuals)]
plotForecastErrors(GDPseries_forecast3$residuals)
seriesEurope <- ts(GDP_Data_Europe$GDP_Growth, start = c(2008), end = c(2022))
plot.ts(seriesEurope)
GDPseries_smoothing4 <-  HoltWinters(seriesEurope, gamma=FALSE)
GDPseries_smoothing4
GDPseries_smoothing4$SSE
plot(GDPseries_smoothing4)
GDPseries_forecast4 <- forecast(GDPseries_smoothing4, h=19)
GDPseries_forecast4
plot(GDPseries_forecast4)
acf(GDPseries_forecast4$residuals, lag.max=20 , na.action = na.pass)
Box.test(GDPseries_forecast4$residuals, lag=20, type="Ljung-Box")
plot.ts(GDPseries_forecast4$residuals)
GDPseries_forecast4$residuals <-GDPseries_forecast4$residuals[!is.na(GDPseries_forecast4$residuals)]
plotForecastErrors(GDPseries_forecast4$residuals)
knitr::opts_chunk$set(echo = TRUE)
ecoModel5 <- lm(GDP ~ Exports, data = economic_log)
print(summary(ecoModel5))
# Plotting the regression line
plot( GDP ~ Exports, data = economic_log,
col = "blue",
main = "Regression: GDP & Exports",
xlab = "Exports",
ylab = "GDP ($billion)")
abline(ecoModel5, col="red")
## Checking all regression assumptions
plot(ecoModel5, 1)
plot(ecoModel5, 2)
residuals <- residuals(ecoModel5)
hist(residuals, main = "Histogram of Residuals", col = "red")
plot(ecoModel5, 3)
install.packages("stats")
library(stats)
# Creating new data for prediction
pred_data <- data.frame(Exports = 8290551190)
# Make predictions
predicted_GDP <- predict(ecoModel5, newdata = pred_data)
# View the predicted GDP
print(predicted_GDP)
install.packages("stats")
# Creating new data for prediction
pred_data <- data.frame(Exports = 8290551190)
# Make predictions
predicted_GDP <- predict(ecoModel5, newdata = pred_data)
# View the predicted GDP
print(predicted_GDP)
# Creating new data for prediction
pred_data <- data.frame(Exports = 290551190)
# Make predictions
predicted_GDP <- predict(ecoModel5, newdata = pred_data)
# View the predicted GDP
print(predicted_GDP)
# Assuming you have a vector of new export values
new_exports = c(290551190, 4038281083, 83531696821)
# Model coefficients
intercept = 3.81283
exports_coefficient = 0.90416
# Prediction
predicted_gdp = intercept + exports_coefficient * new_exports
# Output the predicted GDP values
predicted_gdp
ecoModel5 <- lm(GDP ~ Exports, data = economic_log)
print(summary(ecoModel5))
# Plotting the regression line
plot( GDP ~ Exports, data = economic_log,
col = "blue",
main = "Regression: GDP & Exports",
xlab = "Exports",
ylab = "GDP ($billion)")
abline(ecoModel5, col="red")
## Checking all regression assumptions
plot(ecoModel5, 1)
plot(ecoModel5, 2)
residuals <- residuals(ecoModel5)
hist(residuals, main = "Histogram of Residuals", col = "red")
plot(ecoModel5, 3)
# Assuming you have a vector of new export values
new_exports = c(290551190, 4038281083, 83531696821)
# Model coefficients
intercept = 3.81283
exports_coefficient = 0.90416
# Prediction
predicted_gdp = intercept + exports_coefficient * new_exports
# Output the predicted GDP values
predicted_gdp
# Creating new data for prediction
pred_data = c(290551190, 4038281083, 83531696821)
# Setting coefficients
intercept = 3.81283
exports_coefficient = 0.90416
# Making predictions
predicted_GDP = intercept + exports_coefficient * new_exports
# Output the predicted GDP values
predicted_GDP
# Creating new data for prediction
pred_data <- data.frame(Exports = 4038281083)
# Make predictions
predicted_GDP <- predict(ecoModel5, newdata = pred_data)
# View the predicted GDP
print(predicted_GDP)
# Creating new data for prediction
pred_data <- data.frame(Exports = 262704768)
# Make predictions
predicted_GDP <- predict(ecoModel5, newdata = pred_data)
# View the predicted GDP
print(predicted_GDP)
# Creating new data for prediction
pred_data = c(290551190, 4038281083, 83531696821)
# Setting coefficients
intercept = 3.81283
exports_coefficient = 0.90416
# Making predictions
predicted_GDP = intercept + exports_coefficient * new_exports
predicted_GDP
# Creating new data for prediction
pred_data = c(290551190, 4038281083, 83531696821)
# Setting coefficients
intercept = 3.81283
exports_coefficient = 0.90416
# Making predictions
predicted_GDP = intercept + exports_coefficient * new_exports
print(predicted_GDP)
# Fitting a Multiple Linear Regression model
ecoModel6 <- lm(GDP ~ Exports + Imports , data = economic_log)
print(summary(ecoModel6))
# Adding an extra independent variable to the model
ecoModel7 <- lm(GDP ~ Exports + Imports + Technology_Exports   , data = economic_log)
print(summary(ecoModel7))
# Adding Imports to the model
ecoModel8 <- lm(GDP ~ Exports + Imports + Labor_Force, data = economic_log)
print(summary(ecoModel8))
# Plotting the regression line
ggplot(ecoModel7, aes(x = Exports, y = GDP)) +
geom_point(aes(color = Imports)) +
geom_smooth(method = "lm", formula = y ~ x, se = FALSE, color = "blue") +
labs(title = "Multiple Linear Regression",
x = "Exports",
y = "Gross Domestic Product",
color = "Imports") +
theme_minimal()
## Checking SLR assumptions
plot(ecoModel7, 1)
plot(ecoModel7, 2)
plot(ecoModel7, 3)
intercept = -2.46763
exports_coefficient = -0.24459
imports_coefficient = 1.46749
tech_exports_coefficient = -0.09584
# Creating Sample data
exports_value = 807060793372
imports_value = 862311688153
tech_exports = 67496532150
# Making predictions
predicted_GDP = intercept +
exports_coefficient * exports_value +
imports_coefficient * imports_value +
tech_exports_coefficient * tech_exports
print(predicted_GDP)
# Creating new data for prediction
pred_data = c(290551190, 303828107, 535316688)
# Setting coefficients
intercept = 3.81283
exports_coefficient = 0.90416
# Making predictions
predicted_GDP = intercept + exports_coefficient * new_exports
print(predicted_GDP)
# Creating new data for prediction
pred_data = c(290551190, 303828107, 535316688)
# Setting coefficients
intercept = 3.81283
exports_coefficient = 0.90416
# Making predictions
predicted_GDP = intercept + exports_coefficient * new_exports
print(predicted_GDP)
# Selecting governance-related variables
social_var <- economic_log[, c("Per_Capita", "Corruption_Control", "Political_Stability", "Government_Effectiveness", "Regulatory_Quality", "Rule_of_Law")]
# Computing correlation matrix
social_matrix <- cor(social_var, method="spearman")
corrplot(cor(social_var), method = "number", type = "upper")
pairs(social_var, lower.panel = NULL, pch = 19,cex = 0.2)
# Fitting the Multiple Linear Regression model
socModel1 <- lm(Per_Capita ~ Government_Effectiveness +
Corruption_Control, data = economic_log)
print(summary(socModel1))
# Adding an extra independent variable to the mix
socModel2 <- lm(Per_Capita ~ Government_Effectiveness +
Corruption_Control + Political_Stability, data = economic_log)
print(summary(socModel2))
# Adding Regulatory Quality to the mix
socModel3 <- lm(Per_Capita ~ Government_Effectiveness + Corruption_Control
+ Political_Stability + Regulatory_Quality, data = economic_log)
print(summary(socModel3))
# Plotting the regression line
ggplot(socModel3, aes(x = Government_Effectiveness, y = Per_Capita)) +
geom_point(aes(color = Regulatory_Quality)) +
geom_smooth(method = "lm", formula = y ~ x, se = FALSE, color = "blue") +
labs(title = "Multiple Linear Regression",
x = "Government Effectiveness",
y = "GDP Per Capita",
color = "Regulatory Quality") +
theme_minimal()
## Checking all regression assumptions
plot(socModel3, 1)
plot(socModel3, 2)
residuals <- residuals(socModel3)
hist(residuals, main = "Histogram of Residuals", col = "lightblue")
plot(socModel3, 3)
# Fitting the Multiple Linear Regression model
socModel1 <- lm(Per_Capita ~ Government_Effectiveness +
Corruption_Control, data = economic_log)
print(summary(socModel1))
# Adding an extra independent variable to the mix
socModel2 <- lm(Per_Capita ~ Government_Effectiveness +
Corruption_Control + Political_Stability, data = economic_log)
print(summary(socModel2))
# Adding Regulatory Quality to the mix
socModel3 <- lm(Per_Capita ~ Government_Effectiveness + Corruption_Control
+ Political_Stability + Regulatory_Quality, data = economic_log)
print(summary(socModel3))
# Predicting Per Capita income based on the model
intercept = 9.14689
govteffectiveness_coeff = 0.79609
corruption_control_coeff = -0.14349
political_stability_coeff = 0.24382
regulatory_quality_coeff = 0.67249
# Creating Sample data
pred_data <- data.frame(
Government_Effectiveness = c(1.0, 1.2, 1.1),
Corruption_Control = c(0.8, 0.7, 0.9),
Political_Stability = c(0.5, 0.6, 0.4),
Regulatory_Quality = c(1.1, 1.0, 1.2))
pred_PerCapita <- predict(socModel3, newdata = pred_data)
# Making predictions for multiple years
#percapita_pred <- intercept + govteffectiveness_coeff * pred_data$Government_Effectiveness + corruption_control_coeff * pred_data$Corruption_Control + political_stability_coeff * pred_data$Political_Stability + regulatory_quality_coeff * pred_data$Regulatory_Quality
# Output the predicted Per Capita values
print(percapita_pred)
# Predicting Per Capita income based on the model
intercept = 9.14689
govteffectiveness_coeff = 0.79609
corruption_control_coeff = -0.14349
political_stability_coeff = 0.24382
regulatory_quality_coeff = 0.67249
# Creating Sample data
pred_data <- data.frame(
Government_Effectiveness = c(1.0, 1.2, 1.1),
Corruption_Control = c(0.8, 0.7, 0.9),
Political_Stability = c(0.5, 0.6, 0.4),
Regulatory_Quality = c(1.1, 1.0, 1.2))
pred_PerCapita <- predict(socModel3, newdata = pred_data)
# Making predictions for multiple years
#percapita_pred <- intercept + govteffectiveness_coeff * pred_data$Government_Effectiveness + corruption_control_coeff * pred_data$Corruption_Control + political_stability_coeff * pred_data$Political_Stability + regulatory_quality_coeff * pred_data$Regulatory_Quality
# Output the predicted Per Capita values
print(pred_PerCapita)
# Predicting Per Capita income based on the model
intercept = 9.14689
govteffectiveness_coeff = 0.79609
corruption_control_coeff = -0.14349
political_stability_coeff = 0.24382
regulatory_quality_coeff = 0.67249
# Creating Sample data
pred_data <- data.frame(
Government_Effectiveness = c(-1.252720952, 1.398337722),
Corruption_Control = c(1.038217425, 1.437633395),
Political_Stability = c(-0.01487787627, 0.3860425651),
Regulatory_Quality = c(0.930574059, 1.238437533))
pred_PerCapita <- predict(socModel3, newdata = pred_data)
# Making predictions for multiple years
#percapita_pred <- intercept + govteffectiveness_coeff * pred_data$Government_Effectiveness + corruption_control_coeff * pred_data$Corruption_Control + political_stability_coeff * pred_data$Political_Stability + regulatory_quality_coeff * pred_data$Regulatory_Quality
# Output the predicted Per Capita values
print(pred_PerCapita)
# Predicting Per Capita income based on the model
intercept = 9.14689
govteffectiveness_coeff = 0.79609
corruption_control_coeff = -0.14349
political_stability_coeff = 0.24382
regulatory_quality_coeff = 0.67249
# Creating Sample data
pred_data <- data.frame(
Government_Effectiveness = c(-1.252720952, 1.398337722, 0.996483803),
Corruption_Control = c(1.038217425, 1.437633395, 1.260388613),
Political_Stability = c(-0.01487787627, 0.3860425651, 0.1178766638),
Regulatory_Quality = c(0.930574059, 1.238437533, 0.996483803))
pred_PerCapita <- predict(socModel3, newdata = pred_data)
# Making predictions for multiple years
#percapita_pred <- intercept + govteffectiveness_coeff * pred_data$Government_Effectiveness + corruption_control_coeff * pred_data$Corruption_Control + political_stability_coeff * pred_data$Political_Stability + regulatory_quality_coeff * pred_data$Regulatory_Quality
# Output the predicted Per Capita values
print(pred_PerCapita)
# Predicting Per Capita income based on the model
intercept = 9.14689
govteffectiveness_coeff = 0.79609
corruption_control_coeff = -0.14349
political_stability_coeff = 0.24382
regulatory_quality_coeff = 0.67249
# Creating Sample data for 3 years
pred_data <- data.frame(
Government_Effectiveness = c(-1.252720952, 1.398337722, 0.996483803),
Corruption_Control = c(1.038217425, 1.437633395, 1.260388613),
Political_Stability = c(-0.01487787627, 0.3860425651, 0.1178766638),
Regulatory_Quality = c(0.930574059, 1.238437533, 0.996483803))
# Making predictions
pred_PerCapita <- predict(socModel3, newdata = pred_data)
print(pred_PerCapita)
# Fitting an SLR for a single country in Africa
ecoModel1 <- lm(GDP ~ Exports, data = economicIndicators_Africa)
print(summary(ecoModel1))
# Plotting the regression line
plot( GDP ~ Exports, data = economicIndicators_Africa,
col = "blue",
main = "Regression: GDP & Exports for Africa",
xlab = "Exports",
ylab = "GDP ($billion)")
abline(ecoModel1, col="red")
## Checking SLR assumptions
plot(ecoModel1, 1)
plot(ecoModel1, 2)
plot(ecoModel1, 3)
# Fitting an SLR for a single country in Americas
ecoModel2 <- lm(GDP ~ Exports, data = economicIndicators_Americas)
print(summary(ecoModel2))
# Plotting the regression line
plot( GDP ~ Exports, data = economicIndicators_Americas,
col = "blue",
main = "Regression: GDP & Exports for Americas",
xlab = "Exports",
ylab = "GDP ($billion)")
abline(ecoModel2, col="red")
## Checking SLR assumptions
plot(ecoModel2, 1)
plot(ecoModel2, 2)
plot(ecoModel2, 3)
# Fitting an SLR for a single country in Asia
ecoModel3 <- lm(GDP ~ Exports, data = economicIndicators_Asia)
print(summary(ecoModel3))
# Plotting the regression line
plot( GDP ~ Exports, data = economicIndicators_Asia,
col = "blue",
main = "Regression: GDP & Exports for Asia",
xlab = "Exports",
ylab = "GDP ($billion)")
abline(ecoModel3, col="red")
## Checking SLR assumptions
plot(ecoModel3, 1)
plot(ecoModel3, 2)
plot(ecoModel3, 3)
ecoModel4 <- lm(GDP ~ Exports, data = economicIndicators_Europe)
print(summary(ecoModel4))
# Plotting the regression line
plot( GDP ~ Exports, data = economicIndicators_Europe,
col = "blue",
main = "Regression: GDP & Exports for Europe",
xlab = "Exports",
ylab = "GDP ($billion)")
abline(ecoModel4, col="red")
## Checking SLR assumptions
plot(ecoModel4, 1)
plot(ecoModel4, 2)
plot(ecoModel4, 3)
